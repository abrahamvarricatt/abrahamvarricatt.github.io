<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Note To Self (Posts about python)</title><link>https://note2self.abraham-v.com/</link><description></description><atom:link rel="self" href="https://note2self.abraham-v.com/categories/python.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 20 Feb 2017 19:18:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Puzzles: Cheating Friend and Parentheses Checker</title><link>https://note2self.abraham-v.com/posts/2016/003-cheating-friend-and-parentheses-checker.html</link><dc:creator>Abraham_V</dc:creator><description>&lt;div&gt;&lt;p&gt;I've got two puzzles from &lt;a class="reference external" href="https://www.codewars.com/"&gt;Code Wars&lt;/a&gt; today. The first one is,&lt;/p&gt;
&lt;p&gt;A friend of mine takes a sequence of numbers from 1 to n (n &amp;gt; 0). Within that sequence he chooses two numbers A and B.
He claims that the product (A * B) should be equal to the sum of all the numbers in the sequence, excluding A and B (
i.e. SUM - (A+B) ). Given a number n, can you identify all the number pairs which match the earlier assertion?&lt;/p&gt;
&lt;p&gt;The question wanted me to return the answer as a list. Perfect opportunity for my list comprehension skills! But that
would mean reducing the solution to a form of only one variable. Here's how I performed the reduction,&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6ffeed12f59c48bbb92d871ae91e3a17-1"&gt;&lt;/a&gt;A * B     = SUM - (A + B)
&lt;a name="rest_code_6ffeed12f59c48bbb92d871ae91e3a17-2"&gt;&lt;/a&gt;          = SUM - A - B
&lt;a name="rest_code_6ffeed12f59c48bbb92d871ae91e3a17-3"&gt;&lt;/a&gt;AB + B    = SUM - A
&lt;a name="rest_code_6ffeed12f59c48bbb92d871ae91e3a17-4"&gt;&lt;/a&gt;B (A + 1) = SUM - A
&lt;a name="rest_code_6ffeed12f59c48bbb92d871ae91e3a17-5"&gt;&lt;/a&gt;B         = SUM - A/(A + 1)
&lt;/pre&gt;&lt;p&gt;A simple formula for B in terms of SUM and variable A! Here's the solution I came up with,&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9a5b958b7b864cb6abe0b0d4c732872d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;removNb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9a5b958b7b864cb6abe0b0d4c732872d-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_9a5b958b7b864cb6abe0b0d4c732872d-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_integer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The line extends a bit too much to the side, but it's a compact solution which fit in well with the other results. My
skills are improving! :)&lt;/p&gt;
&lt;p&gt;Another solution which caught my attention is this,&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;removNb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tot&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-7"&gt;&lt;/a&gt;        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tot&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;tot&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-9"&gt;&lt;/a&gt;            &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_21aa4cea34a14f1885f0e9cf5210a1d2-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Nothing too revolutionary about this one, but it just &lt;em&gt;feels&lt;/em&gt; inelegant. One thing that's not so inelegant is the
assertion made that B = SUM % A. Which, I couldn't understand. Fortunately, a comment explained it,&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_2ad2e7e46ab44f2299189f7f330d6a01-1"&gt;&lt;/a&gt;SUM - (A + B) = A * B
&lt;a name="rest_code_2ad2e7e46ab44f2299189f7f330d6a01-2"&gt;&lt;/a&gt;SUM           = A * B + (A + B)
&lt;a name="rest_code_2ad2e7e46ab44f2299189f7f330d6a01-3"&gt;&lt;/a&gt;{ Perform % A operation on both sides }
&lt;a name="rest_code_2ad2e7e46ab44f2299189f7f330d6a01-4"&gt;&lt;/a&gt;SUM % A       = (A * B + (A + B)) % A
&lt;a name="rest_code_2ad2e7e46ab44f2299189f7f330d6a01-5"&gt;&lt;/a&gt;              = (A * B) % A) + ((A + B) % A)
&lt;a name="rest_code_2ad2e7e46ab44f2299189f7f330d6a01-6"&gt;&lt;/a&gt;              = ((A % A) * (B % A)) + ((A % A) + (B % A))
&lt;a name="rest_code_2ad2e7e46ab44f2299189f7f330d6a01-7"&gt;&lt;/a&gt;              = (0 * (B % A)) + (0 + (B % A))
&lt;a name="rest_code_2ad2e7e46ab44f2299189f7f330d6a01-8"&gt;&lt;/a&gt;              = B % A
&lt;/pre&gt;&lt;p&gt;That's some very impressive mathematics right there!&lt;/p&gt;
&lt;p&gt;The second puzzle is about parenthesis matching. i.e. these things - &lt;tt class="docutils literal"&gt;()&lt;/tt&gt;. The problem was to identify if they are
ordered correctly in an input string. Which means something like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(())&lt;/span&gt;&lt;/tt&gt; is valid but &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;())(&lt;/span&gt;&lt;/tt&gt; is not. My solution
went like this,&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valid_parentheses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'('&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-5"&gt;&lt;/a&gt;            &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;')'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-7"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-8"&gt;&lt;/a&gt;                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-9"&gt;&lt;/a&gt;            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-10"&gt;&lt;/a&gt;                &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-12"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_edd2d35b31b245b893a93e59afaeef16-14"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;As valid as that is, it just felt a bit too big. But how could I reduce it any further, while maintaining its
readability? The top voted answer showed me,&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_86c367f6987a434bb15593a74a7365ac-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valid_parentheses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86c367f6987a434bb15593a74a7365ac-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_86c367f6987a434bb15593a74a7365ac-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_86c367f6987a434bb15593a74a7365ac-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'('&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_86c367f6987a434bb15593a74a7365ac-5"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;')'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a name="rest_code_86c367f6987a434bb15593a74a7365ac-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_86c367f6987a434bb15593a74a7365ac-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In an odd sort of way, I'm a bit disappointed to see this. It reads really well, but implies that my Python skills need
polishing - just as I was feeling good about them!&lt;/p&gt;&lt;/div&gt;</description><category>puzzle</category><category>python</category><guid>https://note2self.abraham-v.com/posts/2016/003-cheating-friend-and-parentheses-checker.html</guid><pubDate>Wed, 14 Sep 2016 13:50:00 GMT</pubDate></item><item><title>Puzzle: Roman Numeral Encoder</title><link>https://note2self.abraham-v.com/posts/2016/002-roman-numeral-encoder.html</link><dc:creator>Abraham_V</dc:creator><description>&lt;div&gt;&lt;p&gt;This is another one from &lt;a class="reference external" href="https://www.codewars.com/"&gt;Code Wars&lt;/a&gt; - write a function to convert an integer into the
string representation of itself, in the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Roman_numerals"&gt;roman numeral format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The wikipedia page tells us the symbols used in the Roman numeral alphabet as well as how to count them. After studying
this, I came to the realization that the basic sequence was repeated for every digit - the letters were the different,
but for every digit in our base-10 system, the pattern to write them in the Roman pattern was the same! Surely, I could
make use of this insight in my solution? Which was how I came up with this,&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;digit_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# For one's location&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-3"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-4"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'I'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-5"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'V'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-6"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# For ten's location&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-10"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-11"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'L'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-12"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# For hundred's location&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-15"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-16"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-17"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-18"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-19"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-20"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# For thousand's location&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-22"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-23"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# not sure beyond this&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-24"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-25"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-26"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-28"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;translate_digit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-29"&gt;&lt;/a&gt;    &lt;span class="n"&gt;digit_map_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-30"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-31"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-32"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-33"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-34"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'4'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-35"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-36"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'6'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-37"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'7'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-38"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'8'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-39"&gt;&lt;/a&gt;        &lt;span class="s1"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;letter_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-40"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-41"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;digit_map_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-42"&gt;&lt;/a&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-43"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-44"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-45"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-46"&gt;&lt;/a&gt;        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;translate_digit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digit_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;a name="rest_code_4c9929fb246e404699544c3c6f969065-47"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Something about the above solution that I was proud of was the use of &lt;tt class="docutils literal"&gt;enumerate()&lt;/tt&gt; in the for-loop. In the initial
write-up, I used a local variable to keep track of the position, but after investigating for a more Pythonic way of
coding, the above solution came to me. One nice tactic I learned was the fast shortcut to reverse a string in Python.
Just add &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[::-1]&lt;/span&gt;&lt;/tt&gt; to the end of the string. It treats the string as a list without a start/end location, but
increments backwards - effectively reversing it!&lt;/p&gt;
&lt;p&gt;Regardless, there's one thing about my solution that cannot be denied - it's long. That's not really an issue by
itself, but a part of me just felt like there should be a better way of handling that logic - and I couldn't figure
out what that was. Soo, onto the top answers to the puzzle!&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;roman_numerals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-3"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-4"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'CM'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-5"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-6"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'CD'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-7"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-8"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'XC'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-9"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'L'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-10"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'XL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-11"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-12"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'IX'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-13"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'V'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-14"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'IV'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-15"&gt;&lt;/a&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'I'&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-16"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;roman_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roman_numerals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-19"&gt;&lt;/a&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-20"&gt;&lt;/a&gt;            &lt;span class="n"&gt;roman_string&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;roman_numerals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-21"&gt;&lt;/a&gt;            &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
&lt;a name="rest_code_a0cd858046c24f5883d48482dd444c29-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;roman_string&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And this puts my answer to such shame, that it makes it seem down-right pathetic! But damn, isn't this admirable? This might
arguably, be the first time I'm seeing someone use integers as keys in a python dictionary. It's a feature that I've
seen in documentation, but not in actual use. At first, the solution didn't make sense to me - to exploit the numbers,
you would need a guarantee that they would be picked up in order when looping over them - something which the
documentation for a Python dictionary states as not possible!&lt;/p&gt;
&lt;p&gt;It was then that I noticed the &lt;tt class="docutils literal"&gt;reverse=True&lt;/tt&gt; part. What would that be passed to? A &lt;tt class="docutils literal"&gt;sorted()&lt;/tt&gt; function? How would
that work ..? And then, it hit me! Every Python dictionary has a method called &lt;tt class="docutils literal"&gt;keys()&lt;/tt&gt; which returns a list of all
the keys present in the dictionary. What this solution does is sort that list and pass it on as an iterator to a
for-loop. Sheer brilliance! Don't bother iterating the dictionary - if you need it sorted; grab the keys, sort and loop
over them instead!&lt;/p&gt;
&lt;p&gt;Doing things in this manner also assures us that the Roman translation is handled from the highest to lowest base-10
digit - allowing us to just append the translated string as we go along - bypassing the need for my earlier prepend
logic.&lt;/p&gt;&lt;/div&gt;</description><category>puzzle</category><category>python</category><guid>https://note2self.abraham-v.com/posts/2016/002-roman-numeral-encoder.html</guid><pubDate>Mon, 05 Sep 2016 15:18:00 GMT</pubDate></item><item><title>Puzzle: Directions Reduction</title><link>https://note2self.abraham-v.com/posts/2016/001-directions-reduction.html</link><dc:creator>Abraham_V</dc:creator><description>&lt;div&gt;&lt;p&gt;I came across a puzzle on &lt;a class="reference external" href="https://www.codewars.com/"&gt;Code Wars&lt;/a&gt; a short while ago. The core question could be summarized as follows,&lt;/p&gt;
&lt;p&gt;Given a list of directions, reduce the amount of backtracking needed to arrive at a destination. For example, if &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;plan=['NORTH',&lt;/span&gt; 'SOUTH', 'SOUTH', 'EAST', 'WEST', 'NORTH', 'WEST']&lt;/tt&gt; it can be reduced to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;plan=['WEST']&lt;/span&gt;&lt;/tt&gt;. The idea, is that opposite directions that are adjacent to each other should be reduced, i.e. &lt;tt class="docutils literal"&gt;'NORTH'&lt;/tt&gt; cancels out &lt;tt class="docutils literal"&gt;'SOUTH'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;'EAST'&lt;/tt&gt; cancels out &lt;tt class="docutils literal"&gt;'WEST'&lt;/tt&gt;. A leeway the question gives is that you do not need to worry about circular cancellations. i.e. something like &lt;tt class="docutils literal"&gt;['NORTH', 'EAST', 'SOUTH', 'WEST']&lt;/tt&gt; stays the way it is.&lt;/p&gt;
&lt;p&gt;After pondering on the puzzle for a bit, I came to the following solution,&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;reduce_direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-2"&gt;&lt;/a&gt;  &lt;span class="s1"&gt;'NORTH'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'SOUTH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-3"&gt;&lt;/a&gt;  &lt;span class="s1"&gt;'SOUTH'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'NORTH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-4"&gt;&lt;/a&gt;  &lt;span class="s1"&gt;'EAST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'WEST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-5"&gt;&lt;/a&gt;  &lt;span class="s1"&gt;'WEST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'EAST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-6"&gt;&lt;/a&gt;  &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dirReduc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-12"&gt;&lt;/a&gt;                &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;  &lt;span class="c1"&gt;# reset marker&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-13"&gt;&lt;/a&gt;                &lt;span class="n"&gt;current_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-14"&gt;&lt;/a&gt;                &lt;span class="n"&gt;previous_entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-15"&gt;&lt;/a&gt;                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-16"&gt;&lt;/a&gt;                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;reduce_direction&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;previous_entry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;current_entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-17"&gt;&lt;/a&gt;                                &lt;span class="n"&gt;previous_entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;  &lt;span class="c1"&gt;# To cancel it&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-18"&gt;&lt;/a&gt;                                &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;# A change was made&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-19"&gt;&lt;/a&gt;                        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-20"&gt;&lt;/a&gt;                                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;previous_entry&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-21"&gt;&lt;/a&gt;                                        &lt;span class="n"&gt;current_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;previous_entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-22"&gt;&lt;/a&gt;                                &lt;span class="n"&gt;previous_entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_entry&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-23"&gt;&lt;/a&gt;                                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-24"&gt;&lt;/a&gt;                                        &lt;span class="c1"&gt;# At last element, so add it in&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-25"&gt;&lt;/a&gt;                                        &lt;span class="n"&gt;current_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-26"&gt;&lt;/a&gt;                &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_result&lt;/span&gt; &lt;span class="c1"&gt;# we got new array&lt;/span&gt;
&lt;a name="rest_code_96f3d24027ef4c97bb6c8da8d92301c6-27"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Here's what went through my mind as I solved it - The first problem was to figure out a mechanism to detect adjacent entries which could be deleted. This meant that if I was looping over the original list and encountered something like &lt;tt class="docutils literal"&gt;'NORTH'&lt;/tt&gt; next to a &lt;tt class="docutils literal"&gt;'SOUTH'&lt;/tt&gt;, it was a match. A dictionary with key-value pairs mapping the different invalid entries seemed like a simple way to accomplish this goal. Which is how &lt;tt class="docutils literal"&gt;reduce_direction&lt;/tt&gt; came to be.&lt;/p&gt;
&lt;p&gt;The next question was how to handle the actual deletion, but do I really need to edit the original list? It might be easier (and possibly less destructive) to just make a new list. Then, instead of worrying about what elements to delete, I could just concern myself with the question of what elements to append to my new list! Which was how the for-loop came into being. Admittedly, it isn't as straight-forward as I would have liked.&lt;/p&gt;
&lt;p&gt;Here's how it works - as the loop runs over the list, it keeps a record of the previous entry in the loop, as well as the current entry. If the pair of previous + current, was valid the previous entry would be appended to the new list. It was possible that the current entry might make an invalid pair with the next entry in the list, so I deferred it's addition to the list until the next loop - where it would become the new previous entry. An exception to this is the case when we reach the last element of the list. This would have no next entry to compare against, so if I used &lt;tt class="docutils literal"&gt;enumerate()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;len()&lt;/tt&gt; in the for-loop to identify the last element and append it as a special case.&lt;/p&gt;
&lt;p&gt;This procedure would only work for a single iteration of the list. It is possible that, after removing a few invalid pairs, the new list might contain a new set of invalid pairs - which would need to be detected and removed. So, I put the entire thing in a &lt;tt class="docutils literal"&gt;while&lt;/tt&gt; loop which would keep running until no changes were made to the solution list.&lt;/p&gt;
&lt;p&gt;And the whole thing worked. This isn't what intuitively felt like an elegant solution, but at least it got the job done. Off the top of my head here were a few concerns I had,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;too many branches&lt;/li&gt;
&lt;li&gt;time complexity is horrific - the loop within a loop&lt;/li&gt;
&lt;li&gt;too many variables declared&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But how could the solution be imporved upon? I looked into other solutions to the same problem and found enlightenment! Let's go over a few high-lights.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_39f8e2ef423d4f7aa2eb1b03621c7d7d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"NORTH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"SOUTH"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"EAST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"WEST"&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The above snippet aesthetically solves the issue of duplicated data with my &lt;tt class="docutils literal"&gt;reduce_direction&lt;/tt&gt; dictionary. Instead of storing all four pairs, just club two of them together and use python's &lt;tt class="docutils literal"&gt;sorted()&lt;/tt&gt; function to match them up. As much as I like how this looks, I can't help but worry about it's time complexity. Sure, for just 2 elements, &lt;tt class="docutils literal"&gt;sorted()&lt;/tt&gt; shouldn't have issues, but the approach just doesn't feel like it would scale well. Still - worth nothing none-the-less.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_5739bf155a654f6ba32abec8f513bb78-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dirReduc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_5739bf155a654f6ba32abec8f513bb78-2"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5739bf155a654f6ba32abec8f513bb78-3"&gt;&lt;/a&gt;        &lt;span class="n"&gt;dir2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"NORTH SOUTH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SOUTH NORTH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"EAST WEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"WEST EAST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5739bf155a654f6ba32abec8f513bb78-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;dir3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dir2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_5739bf155a654f6ba32abec8f513bb78-5"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dirReduc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;dir3&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Now, this is a nice bit of code. The author changes the problem from one of matching adjacent list entries to one of just matching strings. It simplifies a lot of the logic to a few &lt;tt class="docutils literal"&gt;replace()&lt;/tt&gt; operations. Once that's done, just split the entire thing back into a list and we have a solution! Keep re-iterating until no changes occour. I'm not sure about time complexity for the &lt;tt class="docutils literal"&gt;replace()&lt;/tt&gt; operations, but this seems to accomplish what I was trying to do in fewer lines of code. That is something to make a note of!!&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;opposite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'NORTH'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'SOUTH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'EAST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'WEST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'SOUTH'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'NORTH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'WEST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'EAST'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dirReduc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;new_plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-5"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-6"&gt;&lt;/a&gt;                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_plan&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;new_plan&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;opposite&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-7"&gt;&lt;/a&gt;                        &lt;span class="n"&gt;new_plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-8"&gt;&lt;/a&gt;                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-9"&gt;&lt;/a&gt;                        &lt;span class="n"&gt;new_plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d5bd36452d494c618040fa738c9abbc3-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_plan&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The top-voted entry however, is in a class of it's own. It actually manages to reduce the time-complexity of the solution to O(n) - something I wasn't sure was possible! The author makes use of a dictionary like I did, but exploits the in-built &lt;tt class="docutils literal"&gt;pop()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;append()&lt;/tt&gt; operations available for any python list. I had forgotten about &lt;tt class="docutils literal"&gt;pop()&lt;/tt&gt; in lists until I saw this solution. What's really nice is how the author makes use of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;list[-1]&lt;/span&gt;&lt;/tt&gt; notation to grab the last element of the solution-list to compare with the current iterated elment. Damn! I wish I'd remembered that.&lt;/p&gt;
&lt;p&gt;Compared to all this, my solution just looks needlessly complicated and embarrassing.&lt;/p&gt;&lt;/div&gt;</description><category>puzzle</category><category>python</category><guid>https://note2self.abraham-v.com/posts/2016/001-directions-reduction.html</guid><pubDate>Wed, 31 Aug 2016 02:37:00 GMT</pubDate></item></channel></rss>