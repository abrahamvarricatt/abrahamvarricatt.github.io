<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Note To Self (Posts about virtualbox)</title><link>https://note2self.abraham-v.com/</link><description></description><atom:link rel="self" href="https://note2self.abraham-v.com/categories/virtualbox.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 20 Feb 2017 19:18:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Setting up an isolated development environment</title><link>https://note2self.abraham-v.com/posts/2016/000-setting-up-an-isolated-development-environment.html</link><dc:creator>Abraham_V</dc:creator><description>&lt;div&gt;&lt;p&gt;I've lost count of how many times I've re-installed my operating system, just because of tool-bloat. For one project or the other, a tool or utility would be installed on my system, then another and before I knew it - either my computer would slow down or the different tools would have conflicts between themselves. Even if that didn't happen there were times when I would want to re-format my system, just to bring it to a 'fresh' state.&lt;/p&gt;
&lt;p&gt;This was a process that was proving to be very time-consuming - and often enough, risky as well. If I didn't have a spare internet connected device nearby, I might configure the installer to provide me with a brick! Surely, I could find a better use of my time than spending a significant portion of the month reinstalling my computer? Searching for a solution to this problem I came across,&lt;/p&gt;
&lt;div class="section" id="virtualbox"&gt;
&lt;h2&gt;VirtualBox&lt;/h2&gt;
&lt;p&gt;It seemed perfect for my needs - a relatively cheap way to bring up an experimental system, work with it and best of all - easy to destroy and recover from! I cannot describe how liberating it was to be able to create a virtual system for quick (and possibly destructive) experiment without worrying about damaging my host system!&lt;/p&gt;
&lt;p&gt;Granted, there were a few drawbacks - I lost out a bit on performace - some compiles took longer to complete than before, but for testing functionality - it did the job. One thing that it didn't quite solve for me, was the issue of configuration.&lt;/p&gt;
&lt;p&gt;Each and every time I needed to boot up a new virtual system, I would still have to spend a considerable effort just setting it up - root usernames, passwords, network settings, disk partitions . . . etc. And this doesn't quite cover the matter of sharing my work. Explaining to a collegue how to setup their own virtual enviroment meant writing a lot of documentation which was a pain to keep updated.&lt;/p&gt;
&lt;p&gt;Quite by accident I then discovered,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vagrant"&gt;
&lt;h2&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;This is like a manager for virtual systems. It supports other virtulaization tools like vmware, but for my needs it acts as a wrapper around virtualbox. I like to think of it as a way to store my virtualbox settings in a textfile which I can add to the VCS. This makes it very easy to share with collegues and friends. Just send them the &lt;tt class="docutils literal"&gt;Vagrantfile&lt;/tt&gt; configuration and ask them to run a single command,&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_28bae2aaaf594d7f9a2627cdea82753a-1"&gt;&lt;/a&gt;$ vagrant up
&lt;/pre&gt;&lt;p&gt;Because of the way vagrant works, it cannot use distribution ISO files directly. Instead, the project introduces something called Vagrant Boxes. These are a set of pre-build virutal images which can be used for testing.&lt;/p&gt;
&lt;p&gt;Recently, I encountered a very odd (and frustrating!) situation - Canonical or CentOS do not maintain updated versions of their operating systems in the vagrant-box archive. Sure, they publish the most recent builds to the archive, but after downloading, spending hours trying to fight against subtle bugs (eg: centos does not sync the &lt;tt class="docutils literal"&gt;/vagrant&lt;/tt&gt; folder between guest and host very well - data just goes &lt;em&gt;missing&lt;/em&gt; after a reboot!), I had enough. And it looks like I'm not alone.&lt;/p&gt;
&lt;p&gt;Fortunately, there is an open source movement working to keep stable vagrant-boxes in the archive - &lt;a class="reference external" href="http://chef.github.io/bento/"&gt;the bento project&lt;/a&gt;. It's run by the folks behind Chef - a system provisioning tool (I perfer ansible).&lt;/p&gt;
&lt;p&gt;And this is what I use these days to setup an isolated environment,&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_fb5e7080d9264ca484408f5c467ed9b1-1"&gt;&lt;/a&gt;$ vagrant init bento/centos-7.2
&lt;a name="rest_code_fb5e7080d9264ca484408f5c467ed9b1-2"&gt;&lt;/a&gt;$ vagrant up
&lt;/pre&gt;&lt;p&gt;Change the init box to use whichever OS is needed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>vagrant</category><category>virtualbox</category><guid>https://note2self.abraham-v.com/posts/2016/000-setting-up-an-isolated-development-environment.html</guid><pubDate>Mon, 29 Aug 2016 14:36:00 GMT</pubDate></item></channel></rss>